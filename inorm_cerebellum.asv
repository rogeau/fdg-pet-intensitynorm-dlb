function inorm_cerebellum(directory, pet, gmmap, wmmap)
    spm('defaults','PET');
    spm_jobman('initcfg');

    cerebellum_path = 'aal_cerebellum.nii';

    folders = genpath(directory);
    folder_list = strsplit(folders, pathsep);

    excel_file = fullfile(directory, 'normalizing_factors.xlsx');
    this_col = 'cerebellum';

    % --- Load or create Excel table ---
    if exist(excel_file, 'file')
        norm_table = readtable(excel_file, 'TextType', 'string');
    else
        % Create empty table with only IPP and Date
        norm_table = table(strings(0,1), strings(0,1), ...
                           'VariableNames', {'IPP','Date'});
        writetable(norm_table, excel_file);
        fprintf('Created new Excel file: %s\n', excel_file);
    end

    % --- Ensure ID columns are string ---
    if ~ismember('IPP', norm_table.Properties.VariableNames)
        norm_table.IPP = strings(height(norm_table),1);
    else
        norm_table.IPP = string(norm_table.IPP);
    end
    if ~ismember('Date', norm_table.Properties.VariableNames)
        norm_table.Date = strings(height(norm_table),1);
    else
        norm_table.Date = string(norm_table.Date);
    end

    % --- Ensure this scriptâ€™s column exists ---
    if ~ismember(this_col, norm_table.Properties.VariableNames)
        norm_table.(this_col) = nan(height(norm_table),1);
    end

    % --- QC PDF file ---
    qc_pdf = fullfile(directory, 'cerebellum_QC.pdf');
    if exist(qc_pdf,'file')
        delete(qc_pdf);
    end

    % --- Loop over all subfolders ---
    for i = 1:length(folder_list)
        folder = folder_list{i};
        if isempty(folder)
            continue;
        end
    
        pet_path = fullfile(folder, pet);
        gm_path  = fullfile(folder, 'mri', gmmap);
        wm_path  = fullfile(folder, 'mri', wmmap);
    
        if exist(pet_path,'file') && exist(wm_path,'file')
            [parent, name, ext] = fileparts(pet_path);
            [parent1, parentName] = fileparts(parent);   % parent folder
            [parent2, grandParentName] = fileparts(parent1); % grandparent
            [~, grandGrandParentName] = fileparts(parent2);
    
            assembly_path = fullfile('results_assembly', ['mni_tissues_' grandGrandParentName '_' grandParentName '_' parentName '.nii.gz']);
            gunzip(assembly_path);
            unzipped_path = assembly_path(1:end-3);  % remove .gz extension
            target_path = fullfile(parent, ['mni_tissues_' grandGrandParentName '_' grandParentName '_' parentName '.nii']);
            movefile(unzipped_path, target_path);
            
            % Now assembly_path should point to the file in PET folder
            assembly_path = target_path;

            movefile(resliced_source, resliced_assembly);

                assembly_path = assembly_path(1:end-3); % remove .gz extension
            end

            fprintf('ðŸ“ˆ Intensity normalization: %s\n', folder);
            %------------------------------------------------------------------
            % 1. Reslice assembly_path to pet_path (nearest neighbor)
            resliced_assembly = fullfile(parent, ['r_' grandGrandParentName '_' grandParentName '_' parentName '_assembly.nii']);
            flags = struct('interp',0,'wrap',[0 0 0],'mask',0,'which',1,'mean',0); % interp=0 => nearest neighbor
            spm_reslice({pet_path, assembly_path}, flags);
    
            % Load resliced assembly
            Vassembly = spm_vol(fullfile(parent, ['r' assembly_path])); 
            Yassembly = spm_read_vols(Vassembly);
    
            %------------------------------------------------------------------
            % 2. Threshold WM and intersect
            Vgm   = spm_vol(gm_path);
            Ygm   = spm_read_vols(Vgm);
            Vwm   = spm_vol(wm_path);
            Ywm   = spm_read_vols(Vwm);
            Vcereb = spm_vol(cerebellum_path);
            Ycereb = spm_read_vols(Vcereb);
    
            GMmask = Ygm > 0.5;
            WMmask = Ywm > 0.5;
    
            % Condition: assembly labels must be 5 or 6
            AssemblyMask = (Yassembly == 5) | (Yassembly == 6);
    
            ROI = (GMmask | WMmask) & (Ycereb > 0.5) & AssemblyMask;

            % Save ROI
            roi_file   = fullfile(folder, 'ROI_cerebellum.nii');
            Vroi       = Vwm;
            Vroi.fname = roi_file;
            spm_write_vol(Vroi,double(ROI));

            %------------------------------------------------------------------
            % 3. Compute mean PET value in ROI
            Vpet = spm_vol(pet_path);
            Ypet = spm_read_vols(Vpet);
            roi_vals = Ypet(ROI);
            mean_ref = mean(roi_vals(~isnan(roi_vals) & roi_vals>0));

            %------------------------------------------------------------------
            % 4. Normalize PET by mean_ref and save
            Ypet_norm  = Ypet / mean_ref;
            Vnorm      = Vpet;
            Vnorm.fname = fullfile(folder, ['cerebellum_' pet]);
            spm_write_vol(Vnorm,Ypet_norm);

            fprintf('âœ… Done %s â†’ mean=%.3f\n', folder, mean_ref);

            %------------------------------------------------------------------
            % 5. Update Excel file
            [filepath_parent, ~, ~] = fileparts(pet_path);        
            [filepath_gdparent, parent_folder] = fileparts(filepath_parent); 
            [~, gdparent_folder] = fileparts(filepath_gdparent);             
            IPP = string(gdparent_folder);
            Date = string(parent_folder);

            row_idx = find(strcmp(norm_table.IPP, IPP) & strcmp(norm_table.Date, Date));

            if isempty(row_idx)
                % Append new row with NaN for all factor columns
                new_row = cell2table(cell(1, width(norm_table)), ...
                                     'VariableNames', norm_table.Properties.VariableNames);
                % Fill NaN for all factor columns
                for c = 1:width(norm_table)
                    if ~ismember(norm_table.Properties.VariableNames{c}, {'IPP','Date'})
                        new_row.(norm_table.Properties.VariableNames{c}) = NaN;
                    end
                end
                % Fill identifying info + this factor
                new_row.IPP = IPP;
                new_row.Date = Date;
                new_row.(this_col) = mean_ref;
                % Append
                norm_table = [norm_table; new_row];
            else
                % Update existing row
                norm_table.(this_col)(row_idx) = mean_ref;
            end

            %------------------------------------------------------------------
            % 6. QC Visualization
            [~,~,z] = ind2sub(size(ROI), find(ROI));
            if isempty(z)
                warning('No ROI found in %s. Skipping QC figure.', folder);
                continue;
            end
            z_mid   = round(mean(z));  
            
            pet_slice  = rot90(squeeze(Ypet(:,:,z_mid)),1);
            mask_slice = rot90(squeeze(ROI(:,:,z_mid)),1);
            
            overlay = mat2gray(pet_slice);
            overlay_rgb = repmat(overlay, [1 1 3]);
            overlay_rgb(:,:,1) = overlay_rgb(:,:,1) + 0.5*mask_slice;
            
            fig = figure('Visible','off','Position',[100 100 1200 400]);
            colormap gray;
            
            subplot(1,3,1); imagesc(pet_slice); axis image off; title('PET');
            subplot(1,3,2); imagesc(mask_slice); axis image off; title('ROI Mask');
            subplot(1,3,3); imagesc(overlay_rgb); axis image off; title('Overlay');
            
            sgtitle(sprintf('QC: %s (slice %d)', folder, z_mid),'Interpreter','none');
            exportgraphics(fig, qc_pdf, 'Append', true);
            close(fig);
        end
    end

    % --- Save updated table ---
    writetable(norm_table, excel_file);
    fprintf('âœ… All QC figures saved in: %s\n', qc_pdf);
    fprintf('âœ… Normalization factors updated in: %s\n', excel_file);
end
